"""
Python相关

1.实现一个单例模式
2.实现一个装饰器
3.用Python实现快排
4.如果系统中需要很多个Python版本，如何进行Python版本的管理
5.如何实现一个全局变量？（除了global，还可以通过单例模式）

数据库相关

1.数据库的数据是实时更新的吗？每点击一次，数据库数据修改一次？
2.Redis hash的个数
3.如何修改Redis数据库的库的个数
4.Redis数据库如何实现持久化
5.Redis数据库支持的数据类型
6.Redis使用AOF方式持久化，aof文件不断增大，如何处理？
7.Redis数据库如何设置密码
8.hash表是如何生成的
9.MySQL数据库的慢查询有了解过吗？
10.MySQL数据库如何使用sql语句插入一条数据
11.MySQL数据库如何进行查询优化
12.如何很多请求同时对Redis的同一个键进行访问，如何保证数据安全
13.说说Redis的淘汰机制
14.当数据越来越多，如何避免hash槽中key出现相同的情况
15.MongDB在哪些场合使用过
16.我的MySQL数据库每天晚上12点进行全备份。第二天有员工在9点钟误删除了一个数据库，但在10点
钟才发现。问如何进行恢复被误删除的数据库并同时保留9点到10点新增的数据同时不影响业务的正常运行？

项目部署相关

1.大家都说Nginx快？快的原因是什么？
Nginx快的原因：异步非阻塞，使用epoll和大量细节处的优化
Nginx的模块：
核心模块： HTTP模块、EVENT模块、MAIL模块
基础模块: HTTP Access模块、HTTP FastCGI模块、HTTP Proxy模块、HTTP Rewrite模块
第三方模块： HTTP UPstream Request Hash模块、NOtice模块、HTTP Access Key模块
Nginx采用epoll模型，异步非阻塞，对Nginx来说，把一个完整的连接请求处理都划分了事件，
一个一个的事件，每部分都相应的模块去处理，一个完整的请求可能是由几百个模块去处理。
优点：
（1）更快：一方面在正常情况下，单次请求会得到更快的响应，另一方面，Nginx可以比其他web
服务器更快的响应请求
（2）高扩展性、跨平台
（3）高可靠性：用于反向代理，宕机的概率微乎其微
（4）低内存消耗
（5）单机支持10万以上的并发连接
（6）热部署
（7）最自由的BSD许可协议
查看Nginx进程：ps - aux  |  grep  Nginx
2.对RPC了解吗？
3.如何在服务器上设置业务进程数？
4.说说正向代理和反向代理？
正向代理：是一个位于客户端和原始服务器之间的服务器，
为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标（原始服务器），
然后代理向原始服务器转交请求并获得的内容返回给客户端，客户必须要进行一些特别的设置才能使用正向代理
正向代理的用途：
（1）访问原来无法访问的资源
（2）可以做缓存，加速访问资源
（3）对客户端访问授权，上网进行认证
（4）代理可以记录用户访问记录，对外隐藏用户信息
反向代理：指以代理服务器来接受internet上连接请求，然后将请求转发内部网络上的服务器，
并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现
为一个服务器。
反向代理的作用：
（1）保证内网的安全，可以使用反向代理提供WAF功能，阻止web攻击
（2）负载均衡，通过反向代理服务器来优化网站的负载


Linux相关

1.如何查看剩余内存
2.如何查看端口是否被占用
3.如何查看一个程序的PID以及它的所有子进程
4.如何为一个目录下的所有文件添加权限
5.对Linux多路复用的理解
6.修改IP地址的方法
5.如果你对一个目录具有写权限，那么你是否具有对这个目录下所有文件具有删除权限？

前端相关

1.对前端HTML CSS和JS了解多少？熟悉吗？
2.对React和bootstrap了解吗？
3.如何进行http优化？（响应头设置Content-Encoding：gzip）

网络编程相关

1.说一下实现TCP建立连接的过程以及当时进入了什么状态？
2.为什么建立连接只需要三次，断开连接需要四次？
3.为什么断开连接时第二次和第三次要分开，不能合在一起吗？

项目相关

1.说一下一个请求过来到返回response的过程
2.如何实现单点登录
3.JWT token是如何进行生成和校验的
4.了解过后端框架吗？tornado了解吗？
5.了解过weiapp2吗？
6.Django如何实现csrf攻击保护
7.对KAFKA了解吗？用过哪些消息队列？使用过RabbitMQ吗？
8.项目团队几个人？开发多长时间？
9.说说你项目中遇到的困难以及如何解决
10.说说你认为自己最有成就感或最深刻的项目

版本控制相关

1.如何从远程仓库拉取分支到本地
2.如何进行版本回退

其他

1.Celery的原理和应用场景
2.Elasticsearch的原理
3.平时是如何学习的？有关注哪些技术？
4.Docker的了解，常用命令，如何暴露端口
5.对ERP了解吗？Odoo了解吗？

侧重点

1.数据库CRUD操作/查询优化以及数据库的知识量
2.框架的对比和了解/项目的具体模块的业务逻辑描述
3.常见的排序算法
4.Linux系统的常用命令和Linux系统了解程度考核
5.项目部署用到的服务器的配置和了解程度

加分项

1.数据库的基本功必须掌握但同时更重要的是理解为什么和是如何实现的，拓展自己知识面
2.Linux系统的底层原理和了解程度
3.目前Golang在后端中也逐渐流行，有时间还是需要去掌握
4.技术没有终点，始终保持乐于学习和接受新技术的心态，面试官看重技术能力同时也看重你的心态
5.自信且好学

自动化测试
1.你是否懂得自动化测试？
了解你对于自动化测试能力的掌握情况，以及是否了解到这项技术
2.你是否懂得封装框架？
（1）所有的测试框架都是基于封装来实现的，封装包含结构的封装、类的封装、函数的封装
（2）现在测试行业封装框架的核心思路：
        关键字驱动封装：将所有的常用的selenium函数进行二次封装，结合数据驱动实现关键字的调用，从而实现自动化测试
                        能够应用在接口自动化和UI自动化中，基于企业实际需求来确定是否应用这种模式
        页面对象模型封装：POM，将系统的所有关联自动化的测试页面进行提取，并封装成页面对象，基于页面对象的串行+数据驱动的形式从而实现自动化
                        只适用于UI自动化测试
3.你如何将实现的自动化在公司进行推广？
（1）demo演示会议，用于介绍现有的框架使用情况
（2）部署测试框架，将讨论在指定的项目试点
（3）生成规范文档，将测试使用流程规范化定义，从而实现对新员工的或者其他需推行的角色进行学习培训
4.你了解哪些数据驱动测试？
（1）yaml：
        优点：易维护、轻便
        缺点：学习成本高、数据的编写不直观
（2）Excel：
        优点：易维护，当你的框架成型以后，基本上基于这一类的数据驱动的使用，没有学习成本
（3）json
（4）类
（5）sql
（6）xmind
5.如何优化实现现有的测试框架？
    selenium grid分布式结构、master/slave结构
    用例并发执行：
            在传统的自动化测试中，所有的代码都是基于线性来实现的，包括测试的执行也是以线性的形式来执行，
            异步机制，线程处理与实现，线程处理与用例处理进行结合
"""